body <- function(thorax_x, thorax_y, thorax_x_mean, thorax_y_mean, wax_x, wax_y){
vector1 <- c(thorax_x, thorax_x_mean, wax_x, thorax_x)
vector2 <- c(thorax_y, thorax_y_mean, wax_y, thorax_y)
area <- picks_theorem(vector1, vector2)
return(area)
}
lowerleft <- function(lk_x, lk_y, lk_x_mean, lk_y_mean, lf_x, lf_y, lf_x_mean, lf_y_mean){
slope_avg <- (lf_y_mean - lk_y_mean)/(lf_x_mean - lk_x_mean)
slope_0 <- (lf_y - lk_y)/(lf_x - lk_x)
intercept_avg <- lf_y_mean - (slope_avg * lf_x_mean)
intercept_0 <- lf_y - (slope_0 * lf_x)
x_intersect <- (intercept_0 - intercept_avg)/(slope_avg - slope_0)
y_intersect <- (slope_avg * x_intersect) + intercept_avg
#This decides which cricket is higher up
bigger_f_x <- lf_x
bigger_f_y <- lf_y
smaller_f_x <- lf_x_mean
smaller_f_y <- lf_y_mean
bigger_k_x <- lk_x
bigger_k_y <- lk_y
smaller_k_x <- lk_x_mean
smaller_k_y <- lk_y_mean
if(lk_x < lk_x_mean){
bigger_k_y <- lk_y_mean
bigger_k_x <- lk_x_mean
smaller_k_x <- lk_x
smaller_k_y <- lk_y
bigger_t_x <- thorax_x_mean
bigger_t_y <- thorax_y_mean
smaller_t_x <- thorax_x
smaller_t_y <- thorax_y
}
if(    (smaller_k_x < x_intersect) & (x_intersect < smaller_f_x)){
if( (smaller_f_y < y_intersect) & (y_intersect < smaller_k_y)){
triangle1_vector1 <- c(smaller_k_x, bigger_k_x, x_intersect, smaller_k_x)
triangle1_vector2 <- c(smaller_k_y, bigger_k_y, y_intersect, smaller_k_y)
triangle2_vector1 <- c(x_intersect, smaller_f_x, bigger_f_x, x_intersect)
triangle2_vector2 <- c(y_intersect, smaller_f_y, bigger_f_y, y_intersect)
area <- picks_theorem(triangle1_vector1, triangle1_vector2) + picks_theorem(triangle2_vector1, triangle2_vector2)
return(area)
}  else{
vector1 <- c(smaller_k_x, bigger_k_x, bigger_f_x, smaller_f_x, smaller_k_x)
vector2 <- c(smaller_k_y, bigger_k_y, bigger_f_y, smaller_f_y, smaller_k_y)
area <- picks_theorem(vector1, vector2)
return(area)}
}
else{
vector1 <- c(smaller_k_x, bigger_k_x, bigger_f_x, smaller_f_x, smaller_k_x)
vector2 <- c(smaller_k_y, bigger_k_y, bigger_f_y, smaller_f_y, smaller_k_y)
area <- picks_theorem(vector1, vector2)
return(area)
}
}
lowerright <- function(lk_x, lk_y, lk_x_mean, lk_y_mean, lf_x, lf_y, lf_x_mean, lf_y_mean){
slope_avg <- (lf_y_mean - lk_y_mean)/(lf_x_mean - lk_x_mean)
slope_0 <- (lf_y - lk_y)/(lf_x - lk_x)
intercept_avg <- lf_y_mean - (slope_avg * lf_x_mean)
intercept_0 <- lf_y - (slope_0 * lf_x)
x_intersect <- (intercept_0 - intercept_avg)/(slope_avg - slope_0)
y_intersect <- (slope_avg * x_intersect) + intercept_avg
#This decides which cricket is higher up
bigger_f_x <- lf_x
bigger_f_y <- lf_y
smaller_f_x <- lf_x_mean
smaller_f_y <- lf_y_mean
bigger_k_x <- lk_x
bigger_k_y <- lk_y
smaller_k_x <- lk_x_mean
smaller_k_y <- lk_y_mean
if(lk_x < lk_x_mean){
bigger_k_y <- lk_y_mean
bigger_k_x <- lk_x_mean
smaller_k_x <- lk_x
smaller_k_y <- lk_y
bigger_t_x <- thorax_x_mean
bigger_t_y <- thorax_y_mean
smaller_t_x <- thorax_x
smaller_t_y <- thorax_y
}
if(    (smaller_k_x < x_intersect) & (x_intersect < smaller_f_x)){
if( (smaller_f_y < y_intersect) & (y_intersect < smaller_k_y)){
triangle1_vector1 <- c(smaller_k_x, bigger_k_x, x_intersect, smaller_k_x)
triangle1_vector2 <- c(smaller_k_y, bigger_k_y, y_intersect, smaller_k_y)
triangle2_vector1 <- c(x_intersect, smaller_f_x, bigger_f_x, x_intersect)
triangle2_vector2 <- c(y_intersect, smaller_f_y, bigger_f_y, y_intersect)
area <- picks_theorem(triangle1_vector1, triangle1_vector2) + picks_theorem(triangle2_vector1, triangle2_vector2)
return(area)
}  else{
vector1 <- c(smaller_k_x, bigger_k_x, bigger_f_x, smaller_f_x, smaller_k_x)
vector2 <- c(smaller_k_y, bigger_k_y, bigger_f_y, smaller_f_y, smaller_k_y)
area <- picks_theorem(vector1, vector2)
return(area)}
}
else{
vector1 <- c(smaller_k_x, bigger_k_x, bigger_f_x, smaller_f_x, smaller_k_x)
vector2 <- c(smaller_k_y, bigger_k_y, bigger_f_y, smaller_f_y, smaller_k_y)
area <- picks_theorem(vector1, vector2)
return(area)
}
}
dist.func <- function(x1,y1,x2,y2)
{
sqrt((x2-x1)^2 + (y2-y1)^2)
}
#find the angle between the ab and the center line
a <- dist.func(ab_x,ab_y,wax_x,ab_y)
b <- dist.func(wax_x,wax_y,wax_x,ab_y)
c <- dist.func(ab_x,ab_y,wax_x,wax_y)
angles <- acos((b^2+c^2-a^2)/(2*b*c))
for (i in 1:frame_len)
{
if (ab_x[i] <= wax_x[i])
{
angles[i] <- -angles[i]
}
}
angles <- angles*180/pi
T=frame_len
num.frames <- 12
angle.frame <- rep(0, frame_len/num.frames)
for(i in seq(0, T, num.frames))
{
angle.frame[i/num.frames] <- mean(angles[i:i+num.frames-1])
}
frames <- seq(1:frame_len)
shots <- rep(0, frame_len/num.frames)
for (i in seq(0, T, num.frames))
{
shots[i/num.frames] <- i
}
body.twitch <- rep(0, frame_len)
upperleft.twitch <- rep(0, frame_len)
upperright.twitch <- rep(0, frame_len)
lowerleft.twitch <- rep(0, frame_len)
lowerright.twitch <- rep(0, frame_len)
grand.twitch <- rep(0, frame_len)
average.twitch <- rep(0,0)
bodyshot.twitch <- rep(0,0)
upperleftshot.twitch <- rep(0,0)
upperrightshot.twitch <- rep(0,0)
lowerleftshot.twitch <- rep(0,0)
lowerrightshot.twitch <- rep(0,0)
#
for(i in seq(1, T-12,num.frames)){
ab_x_mean <- mean(ab_x[(i):(i+11)])
ab_y_mean <- mean(ab_y[(i):(i+11)])
wax_x_mean <- mean(wax_x[(i):(i+11)])
wax_y_mean <- mean(wax_y[i:(i+11)])
left_knee_x_mean <- mean(left_knee_x[i:(i+11)])
left_knee_y_mean <- mean(left_knee_y[i:(i+11)])
left_foot_x_mean <- mean(left_foot_x[i:(i+11)])
left_foot_y_mean <- mean(left_foot_y[i:(i+11)])
right_knee_x_mean <- mean(right_knee_x[i:(i+11)])
right_knee_y_mean <- mean(right_knee_y[i:(i+11)])
right_foot_x_mean <- mean(right_foot_x[i:(i+11)])
right_foot_y_mean <- mean(right_foot_y[i:(i+11)])
upperleft.sum <- 0
upperright.sum <- 0
lowerleft.sum <- 0
lowerright.sum <- 0
body.sum <- 0
for(j in i:(i+11)){
upperleft.twitch[j] <- upperleft(ab_x[j], ab_y[j], ab_x_mean, ab_y_mean, left_knee_x[j], left_knee_y[j], left_knee_x_mean, left_knee_y_mean)
upperleft.sum <- upperleft.sum + upperleft.twitch[j]
upperright.twitch[j]<- upperright(ab_x[j], ab_y[j], ab_x_mean, ab_y_mean, right_knee_x[j], right_knee_y[j],
right_knee_x_mean, right_knee_y_mean)
upperright.sum <- upperright.sum + upperright.twitch[j]
lowerleft.twitch[j] <- lowerleft(left_knee_x[j], left_knee_y[j], left_knee_x_mean, left_knee_y_mean,
left_foot_x[j], left_foot_y[j], left_foot_x_mean, left_foot_y_mean)
lowerleft.sum <- lowerleft.sum + lowerleft.twitch[j]
lowerright.twitch[j] <-lowerright(right_knee_x[j], right_knee_y[j], right_knee_x_mean, right_knee_y_mean,
right_foot_x[j], right_foot_y[j], right_foot_x_mean, right_foot_y_mean)
lowerright.sum <- lowerright.sum + lowerright.twitch[j]
body.twitch[j] <- body(ab_x[j], ab_y[j], ab_x_mean, ab_y_mean, wax_x[j], wax_y[j])
body.sum <- body.sum + body.twitch[j]
grand.twitch[j] <- upperleft.twitch[j] + upperright.twitch[j] + lowerleft.twitch[j] + lowerright.twitch[j] + body.twitch[j]
}
upperleftshot.twitch <- c(upperleftshot.twitch, upperleft.sum)
upperrightshot.twitch <- c(upperrightshot.twitch, upperright.sum)
lowerleftshot.twitch <- c(lowerleftshot.twitch, lowerleft.sum)
lowerrightshot.twitch <- c(lowerrightshot.twitch, lowerright.sum)
bodyshot.twitch <- c(bodyshot.twitch, body.sum)
avg.sum <- upperleft.sum + upperright.sum + lowerleft.sum + lowerright.sum + body.sum
average.twitch <- c(average.twitch, avg.sum)
}
twitch.frame <- cbind(body.twitch, upperleft.twitch, lowerleft.twitch, upperright.twitch, lowerright.twitch)
k <- 200
len <- length(seq(0, T, k))
index <- seq(0, T, k)
viz_a_x <- matrix(0, nrow=14, ncol=len)
viz_a_y <- matrix(0, nrow=14,ncol=len)
viz_w_x <- matrix(0, nrow=14, ncol=len)
viz_w_y <- matrix(0, nrow=14, ncol=len)
viz_ul_x <- matrix(0, nrow=14, ncol=len)
viz_ul_y <- matrix(0, nrow=14, ncol=len)
viz_ll_x <- matrix(0, nrow=14, ncol=len)
viz_ll_y <- matrix(0, nrow=14, ncol=len)
viz_ur_x <- matrix(0, nrow=14, ncol=len)
viz_ur_y <- matrix(0, nrow=14, ncol=len)
viz_lr_x <- matrix(0, nrow=14, ncol =len)
viz_lr_y <- matrix(0, nrow=14, ncol=len)
for (s in 1:len)
{
i <- index[s]
if (i > 0)
{
for(j in 1:13){
viz_w_x[j,s] <- wax_x[i + (j-7)] - wax_x[i +(j-7)] + i
viz_w_y[j,s] <- -wax_y[i+(j-7)]
viz_a_x[j,s] <-  ab_x[i+(j-7)] - wax_x[i+(j-7)] + i
viz_a_y[j,s] <- -ab_y[i+(j-7)]
viz_ul_x[j,s] <-  left_knee_x[i+(j-7)] - wax_x[i+(j-7)] + i
viz_ul_y[j,s] <- -left_knee_y[i+(j-7)]
viz_ur_x[j,s] <-  right_knee_x[i+(j-7)] - wax_x[i+(j-7)] + i
viz_ur_y[j,s] <- -right_knee_y[i+(j-7)]
viz_lr_x[j,s] <-  right_foot_x[i+(j-7)] - wax_x[i+(j-7)] + i
viz_lr_y[j,s] <- -right_foot_y[i+(j-7)]
viz_ll_x[j,s] <-  left_foot_x[i+(j-7)] - wax_x[i+(j-7)] + i
viz_ll_y[j,s] <- -left_foot_y[i +(j-7)]
}
}
else{
viz_w_x[,s] <- wax_x[1] - wax_x[1] + i
viz_w_y[,s] <- -wax_y[1]
viz_a_x[,s] <-  ab_x[1] - wax_x[1] + i
viz_a_y[,s] <- -ab_y[1]
viz_ul_x[,s] <-  left_knee_x[1] - wax_x[1] + i
viz_ul_y[,s] <- -left_knee_y[1]
viz_ur_x[,s] <-  right_knee_x[1] - wax_x[1] + i
viz_ur_y[,s] <- -right_knee_y[1]
viz_lr_x[,s] <-  right_foot_x[1] - wax_x[1] + i
viz_lr_y[,s] <- -right_foot_y[1]
viz_ll_x[,s] <-  left_foot_x[1] - wax_x[1] + i
viz_ll_y[,s] <- -left_foot_y[1]
}
for(l in 1:len){
viz_w_x[14,l] <- mean(viz_w_x[(1:13),l])
viz_w_y[14,l] <- mean(viz_w_y[(1:13),l])
viz_a_x[14,l] <-  mean(viz_a_x[(1:13),l])
viz_a_y[14,l] <- mean(viz_a_y[(1:13),l])
viz_ul_x[14,l] <-  mean(viz_ul_x[(1:13),l])
viz_ul_y[14,l] <- mean(viz_ul_y[(1:13),l])
viz_ur_x[14,l] <- mean(viz_ur_x[(1:13),l])
viz_ur_y[14,l] <- mean(viz_ur_y[(1:13),l])
viz_lr_x[14,l] <-  mean(viz_lr_x[(1:13),l])
viz_lr_y[14,l] <- mean(viz_lr_y[(1:13),l])
viz_ll_x[14,l] <-  mean(viz_ll_x[(1:13),l])
viz_ll_y[14,l] <- mean(viz_ll_y[(1:13),l])
}
}
pdf('Figures_191009_190708_ALTPlots.pdf', width=30,height=20)
par(mfrow = c(4,1), mar = c(0.5,7,0.5,0.5), oma = c(10,2,4,24),cex.lab=1.5,cex.axis=1.5)
plot(viz_a_x[14,],viz_a_y[14,], xlab = '', ylab='', ylim=c(-700,-100), col = "black",pch = 16,axes=FALSE, xaxt = 'n')
points(viz_w_x[14,],viz_w_y[14,], xlim = c(0, frame_len), ylim=c(-800,-100), col = "blue",pch = 16,cex=3)
points(viz_ul_x[14,],viz_ul_y[14,],col = "lime green",pch = 16,cex=3)
points(viz_ll_x[14,],viz_ll_y[14,],col = "gold2",pch = 16,cex=3)
points(viz_ur_x[14,],viz_ur_y[14,],col = "darkorange2",pch = 16,cex=3)
points(viz_lr_x[14,],viz_lr_y[14,],col = "red3",pch = 16,cex=3)
box()
text(x=(-75),y=(-650),label="(A)",cex=5)
mtext(side=2,"Mean Position", line=4,cex=2.5)
for(j in 1:len)
{
segments(viz_a_x[14,j], viz_a_y[14,j], viz_w_x[14,j],  viz_w_y[14,j], col = "grey", lwd = 4)
segments(viz_a_x[14,j], viz_a_y[14,j], viz_ul_x[14,j], viz_ul_y[14,j], col = "grey", lwd = 4)
segments(viz_a_x[14,j], viz_a_y[14,j], viz_ur_x[14,j], viz_ur_y[14,j], col = "grey", lwd = 4)
segments(viz_ul_x[14,j], viz_ul_y[14,j], viz_ll_x[14,j], viz_ll_y[14,j], col = "grey", lwd = 4)
segments(viz_ur_x[14,j], viz_ur_y[14,j], viz_lr_x[14,j], viz_lr_y[14,j], col = "grey", lwd = 4)
}
plot(shots,lowerrightshot.twitch, type = "l", xlab = "", ylab = "", lwd = 4, col = rgb(205/255, 0, 0, 0.6),axes=FALSE)
points(shots,bodyshot.twitch, type = "l", col = rgb(0, 0, 1, 0.6), lwd = 4)
points(shots,lowerleftshot.twitch, type = "l", xlab = "", ylab = "Lower Left Twitch", col = rgb(238/255, 201/255, 0, 0.6), lwd = 4)
points(shots,upperrightshot.twitch, type = "l", xlab = "", ylab = "Upper Right Twitch", col = rgb(238/255, 118/255, 0, 0.6), lwd = 4)
points(shots,upperleftshot.twitch , type = "l", xlab = "", ylab = "Upper Left Twitch", col = rgb(50/255, 205/255, 50/255, 0.6), lwd = 4)
text(x=(-75),y=(4000),label="(B)",cex=5)
box()
mtext(side=2,expression(paste("Variation (",mm^2,")",sep="")), line=4,cex=2.5)
axis(2,at=c(10000,30000),labels=c(100,300),cex.axis=2.5)
plot(shots, angle.frame, type = "l", xlab = "",ylab = "", col = "mediumorchid4", lwd = 4,axes=FALSE)
mtext(side=2,expression(paste("Angle (degrees)",sep="")), line=4,cex=2.5)
text(x=(-75),y=(-2),label="(C)",cex=5)
box()
axis(2,at=seq(-2,10,by=2),labels=seq(-2,10,by=2),cex.axis=2.5)
cols <- rep("midnightblue",length(ss_x))
# 5,5 | 4,5 | 5,5 | 5,5 | 5,5 | 5,5 | 5,5 | 5,5 | 5,4
ud <- c(5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4)
out <- rep(0,0)
light.green <- rgb(0.1,0.9,0.1,0.5)
light.red <- rgb(0.9,0.1,0.1,0.5)
for(r in 1:length(ud))
{
if (r%%2 ==1)
{
out <- c(out,rep(1,ud[r]))
}else
{
out <- c(out,rep(2,ud[r]))
}
}
counter <- 0
for(j in 2:(length(ss_x)-1))
{
if ((ss_x[j]>0)&(ss_x[j-1]==0))
{
counter <- counter +1
}
if (ss_x[j]>0)
{
if(out[counter]==1)
{
cols[j] <- light.red
}else
{
cols[j] <- light.green
}
}
}
par(mar=c(5,7,0.5,0.5))
plot(1:frame_len,ss_x,  type = "h", xlab = "", ylab = "",pch=20, col = cols,axes=FALSE,ylim=c(0,100),cex=3,yaxs='i')
axis(1,labels=TRUE,cex.axis=3,line=1,tick=FALSE)
mtext(side=2,"Sound (dB)",line=4,cex=3)
mtext(side=1,"Frame",line=4,cex=3)
axis(2,labels=c(30,60,90),at=c(30,60,90),cex.axis=2.5)
legend(x="topleft",legend=c("L","R"),title="Side",col=c(light.red,light.green),cex=5,pch=20)
text(x=(-85),y=(10),label="(D)",cex=5)
box()
dev.off()
source('~/Documents/GitHub/Crickets-Methods/crickstats.R')
source('~/Documents/GitHub/Crickets-Methods/Figure4Script.R')
#header <- scan("190624ADeepCut_resnet50_190708Jul8shuffle1_500000.csv", nlines = 1, what = character())
data <- read.csv("191009_190708_ALT.test.file.csv", skip = 3, header = FALSE)
#Vectorizing the data
frame_col <- data[,1]
ab_x <- data[,2]
ab_y <- -data[,3]
frame_len <- length(ab_x)
wax_x <- data[,5]
wax_y <- -data[,6]
ss_x <- data[, 8]
ss_y <- -data[,9]
left_knee_x <- data[,11]
left_knee_y <- -data[,12]
left_foot_x <- data[,14]
left_foot_y <- -data[,15]
right_knee_x <- data[, 17]
right_knee_y <- -data[, 18]
right_foot_x <- data[, 20]
right_foot_y <- -data[, 21]
t_col <- function(color, percent = 50, name = NULL) {
#      color = color name
#    percent = % transparency
#       name = an optional name for the color
## Get RGB values for named color
rgb.val <- col2rgb(color)
## Make new color using input color as base and alpha set by transparency
t.col <- rgb(rgb.val[1], rgb.val[2], rgb.val[3],
max = 255,
alpha = (100 - percent) * 255 / 100,
names = name)
## Save the color
invisible(t.col)
}
min_db <- min(ss_x)
max_db <- max(ss_x)
new_ss_x <- (((ss_x - min_db) * (0 - -60)) / (max_db - min_db)) + -60
col_ss_x <- (((ss_x - min_db) * (1 - 0)) / (max_db - min_db)) + 0
cricket_graph <- function(start, end){
plot(1,xlim = c(400,1000), ylim = c(-650, 0), axes=FALSE)
#sound <- rgb(0, 0, 1, max = 1, alpha = max(col_ss_x[start:end]))
#polygon(x = c(500, 550, 550, 500),y = c(-200, -200, -250, -250), col = sound)
text(x = 450,y=-50,label=start,cex=2,col=grey(0.5))
light_navy <- t_col("navy", 75)
light_blue <- t_col('blue', 75)
light_green <- t_col('green', 75)
light_yellow <- t_col('yellow', 75)
light_orange <- t_col('orange', 75)
light_brown <- t_col('brown', 75)
light_grey <- grey(0.7,0.01)
points(ss_x[(start):(end)], ss_y[(start):(end)], col = "turquoise", pch = 16)
points(ab_x[(start):(end)], ab_y[(start):(end)], col = light_navy, pch = 16)
points(wax_x[(start):(end)],-wax_y[(start):(end)], col = light_blue, pch=16)
points(left_knee_x[(start):(end)], left_knee_y[(start):(end)], col = light_green,pch = 16)
points(left_foot_x[(start):(end)], left_foot_y[(start):(end)], col=light_yellow,pch = 16)
points(right_knee_x[(start):(end)],right_knee_y[(start):(end)], col=light_orange,pch = 16)
points(right_foot_x[(start):(end)], right_foot_y[(start):(end)], col=light_brown,pch = 16)
for(j in start:(end-1)){
segments(ab_x[j], ab_y[j], wax_x[j], wax_y[j], col = light_grey)
segments(ab_x[j], ab_y[j], left_knee_x[j], left_knee_y[j], col = light_grey)
segments(ab_x[j], ab_y[j], right_knee_x[j], right_knee_y[j], col = light_grey)
segments(left_knee_x[j], left_knee_y[j], left_foot_x[j], left_foot_y[j], col = light_grey)
segments(right_knee_x[j],right_knee_y[j], right_foot_x[j], right_foot_y[j], col = light_grey)
}
#segments(ab_x[end], -ab_y[end], wax_x[end], -wax_y[end], col = "red")
#segments(ab_x[end], -ab_y[end], left_knee_x[end], -left_knee_y[end], col = "red")
#segments(ab_x[end], -ab_y[end], right_knee_x[end], -right_knee_y[end], col = "red")
#segments(left_knee_x[end], -left_knee_y[end], left_foot_x[end], -left_foot_y[end], col = "red")
#segments(right_knee_x[end], -right_knee_y[end], right_foot_x[end], -right_foot_y[end], col = "red")
ab_x_mean <- mean(ab_x[(start):(end)])
ab_y_mean <- mean(ab_y[(start):(end)])
wax_x_mean <- mean(wax_x[(start):(end)])
wax_y_mean <- mean(wax_y[start:end])
left_knee_x_mean <- mean(left_knee_x[start:end])
left_knee_y_mean <- mean(left_knee_y[start:end])
left_foot_x_mean <- mean(left_foot_x[start:end])
left_foot_y_mean <- mean(left_foot_y[start:end])
right_knee_x_mean <- mean(right_knee_x[start:end])
right_knee_y_mean <- mean(right_knee_y[start:end])
right_foot_x_mean <- mean(right_foot_x[start:end])
right_foot_y_mean <- mean(right_foot_y[start:end])
points(ab_x_mean, ab_y_mean, col = 'navy', pch=20)
points(wax_x_mean, wax_y_mean, col='blue', pch=20)
points(left_knee_x_mean, left_knee_y_mean, col = 'green', pch=20)
points(left_foot_x_mean, left_foot_y_mean, col = 'yellow', pch=20)
points(right_knee_x_mean, right_knee_y_mean, col = 'orange', pch=20)
points(right_foot_x_mean, right_foot_y_mean, col = 'brown', pch=20)
polygon(x = c(500, 550, 550, 500),y = c(200, 200, 250, 250))
box()
#  segments(ab_x_mean, -ab_y_mean, wax_x_mean, -wax_y_mean)
# segments(ab_x_mean, -ab_y_mean, left_knee_x_mean, -left_knee_y_mean)
# segments(ab_x_mean, -ab_y_mean, right_knee_x_mean, -right_knee_y_mean)
# segments(left_knee_x_mean, -left_knee_y_mean, left_foot_x_mean, -left_foot_y_mean)
#segments(right_knee_x_mean, -right_knee_y_mean, right_foot_x_mean, -right_foot_y_mean)
}
T=5262
library(jpeg)
img <- readJPEG("testpic.jpg")
pdf('Figures/191009_190708_ALTtestfile.pdf',width=30,height=20)
pdf('Color_demo.pdf',width=30,height=20)
num.frames <- 277
par(mfrow=c(4,5),mar=c(0.1,0.1,0.1,0.1))
plot(1:10,ty="n", axes=FALSE, ylab="", xlab="")
rasterImage(img,0,0,10,10)
for(i in seq(0, T, num.frames)){
cricket_graph(i, i+num.frames-1)
}
dev.off()
source("Reader.R")
setwd("~/Documents/GitHub/Crickets-Methods/Final")
## Master.R: performs calculations and visualization routine given a file name
## Uses Reader.R script to read in the data; Functions.R script to define functions
setwd("~/Documents/GitHub/Crickets-Methods/Final")
source("Reader.R")
source("Functions.R")
## Master.R
setwd("~/Documents/GitHub/Crickets-Methods/Final")
source("Functions.R")
source("Reader.R")
source("Reader.R")
source("Calculator.R")
source("Grapher.R")
t_col <- function(color, percent = 50, name = NULL) { # makes colors more transparent
#      color = color name
#    percent = % transparency
#       name = an optional name for the color
## Get RGB values for named color
rgb.val <- col2rgb(color)
## Make new color using input color as base and alpha set by transparency
t.col <- rgb(rgb.val[1], rgb.val[2], rgb.val[3],
max = 255,
alpha = (100 - percent) * 255 / 100,
names = name)
## Save the color
invisible(t.col)
}
T=5262
library(jpeg)
img <- readJPEG("testpic.jpg")
pdf('Color_demo.pdf',width=30,height=20)
num.frames <- 277
par(mfrow=c(4,5),mar=c(0.1,0.1,0.1,0.1))
plot(1:10,ty="n", axes=FALSE, ylab="", xlab="")
rasterImage(img,0,0,10,10)
for(i in seq(0, T, num.frames)){
cricket_graph(i, i+num.frames-1)
}
dev.off()
## Master.R
setwd("~/Documents/GitHub/Crickets-Methods/Final")
source("Functions.R")
source("Reader.R")
source("Calculator.R")
source("Grapher.R")
source('~/Documents/GitHub/Crickets-Methods/Final/fig2_DLC.R')
source('~/Documents/GitHub/Crickets-Methods/Final/fig2_DLC.R')
img <- readJPEG("labelled_cricket.jpg") # picture of actual cricket
## Figure 2 of DLC Paper. Uses
library(jpeg)
data <- read.csv("191009_190708_ALT.test.file.csv", # generates dataframe from .csv file
skip = 3, header = FALSE) # skip first 3 lines, ignore header names
img <- readJPEG("labelled_cricket") # picture of actual cricket
img <- readJPEG("labelled_cricket.jpg") # picture of actual cricket
source('~/Documents/GitHub/Crickets-Methods/Final/fig2_DLC.R')
setwd("~/Documents/GitHub/Crickets-Methods")
data <- read.csv("Figure_2/191009_190708_ALT.test.file.csv", # generates dataframe from .csv file
skip = 3, header = FALSE) # skip first 3 lines, ignore header names
data <- read.csv("Figure-2/191009_190708_ALT.test.file.csv", # generates dataframe from .csv file
skip = 3, header = FALSE) # skip first 3 lines, ignore header names
## Figure 2 of DLC Paper. Uses
setwd("~/Documents/GitHub/Crickets-Methods")
library(jpeg)
data <- read.csv("Figure-2/191009_190708_ALT.test.file.csv", # generates dataframe from .csv file
skip = 3, header = FALSE) # skip first 3 lines, ignore header names
data <- read.csv("191009_190708_ALT.test.file.csv", # generates dataframe from .csv file
skip = 3, header = FALSE) # skip first 3 lines, ignore header names
img <- readJPEG("Figure-2/labelled_cricket.jpg") # picture of actual cricket
## Figure 2 of DLC Paper. Uses
library(jpeg)
setwd("~/Documents/GitHub/Crickets-Methods")
data <- read.csv("191009_190708_ALT.test.file.csv", # generates dataframe from .csv file
skip = 3, header = FALSE) # skip first 3 lines, ignore header names
setwd("~/Documents/GitHub/Crickets-Methods/Figure-2")
img <- readJPEG("labelled_cricket.jpg") # picture of actual cricket

}) # end with(as.list ...
}
times <- seq(0, 100, by = 0.01)
out <- ode(y = state, times = times, func = coupled_ODE, parms = parameters)
### ODEs Solver
library("deSolve")
out <- ode(y = state, times = times, func = coupled_ODE, parms = parameters)
plot(out, xlab = "time", ylab = "-")
plot(out[, "X"], out[, "Y"], pch = ".")
## ODES Grades
ihw <- data.frame("earned" = rep(0,0), "total" = rep(0,0))
ghw <- data.frame("earned" = rep(0,0), "total" = rep(0,0))
exams <- data.frame("earned" = rep(0,0), "total" = rep(0,0))
exams[1, ] <- c(23.5, 27)
ihw[1, ] <- c(38.15, 39); ghw[1, ] <- c(31, 31)
ihw[2, ] <- c(50, 55); ghw[2, ] <- c(21, 21)
ihw[3, ] <- c(69, 70); ghw[3, ] <- c(45, 45)
ihw[4, ] <- c(44.5, 45.5); ghw[4, ] <- c(29.5, 31)
ihw[5, ] <- c(58.5, 61); ghw[5, ] <- c(25.5, 26)
ihw[6, ] <- c(46.5, 51); ghw[6, ] <- c(26, 26)
ihw[7, ] <- c(33.5, 36); ghw[7, ] <- c(NA, NA)
ihw[8, ] <- c(66, 71); ghw[8, ] <- c(20, 20)
ihw[9, ] <- c(45.5, 46); ghw[9, ] <- c(24.75, 25)
ihw[10, ] <- c(63, 63); ghw[10, ] <- c(30,30)
ihw[11, ] <- c(48, 48); ghw[11, ] <- c(26,26)
weeks <- nrow(ihw)
ihw <- cbind(ihw, "score" = (ihw[,1]/ihw[,2]))
ghw <- cbind(ghw, "score" = (ghw[,1]/ghw[,2]))
exams <- cbind(exams, "score" = (exams[,1]/exams[,2]))
ghw_pw <- sum(ghw[,1], na.rm = TRUE)/sum(ghw[,2], na.rm = TRUE)
ghw_ew <- sum(ghw[,3], na.rm=TRUE)/length(which(is.na(ghw[,3]) == FALSE))
ihw_pw <- sum(ihw[,1], na.rm = TRUE)/sum(ihw[,2], na.rm = TRUE)
ihw_ew <- sum(ihw[,3])/length(ihw[,3])
exam_ew <- sum(exams[,3])/length(exams[,3])
cat("Group HW overall, point weighted:", ghw_pw, "\n",
"Group HW overall, equal weight:", ghw_ew, "\n")
cat("Individual HW overall, point weighted:", ihw_pw, "\n",
"Individual HW overall, equal weight:", ihw_ew, "\n")
cat("Exams overall, equal weight:", exam_ew, "\n")
exams[1, ] <- c(23.5, 27)
exams[2, ] <- c(40,40)
exams <- data.frame("earned" = rep(0,0), "total" = rep(0,0))
exams[1, ] <- c(23.5, 27)
exams[2, ] <- c(40,40)
ihw[1, ] <- c(38.15, 39); ghw[1, ] <- c(31, 31)
ihw[2, ] <- c(50, 55); ghw[2, ] <- c(21, 21)
ihw[3, ] <- c(69, 70); ghw[3, ] <- c(45, 45)
ihw[4, ] <- c(44.5, 45.5); ghw[4, ] <- c(29.5, 31)
ihw[5, ] <- c(58.5, 61); ghw[5, ] <- c(25.5, 26)
source('~/Documents/GitHub/R_Misc/odes.R')
tot_grade
ihw_pw
final_hw_score
.75 <- final_hw_score
final_hw_score <- .75
tot_grade <- (ihw_ew*25 +
ghw_ew*20 +
engagement*2 +
final_hw_score*3 +
exams[1,3]*25+
exams[2,3]*25)/(25+20+2+3+25+25)
tot_grade
source('~/Documents/GitHub/Bumble-Bees/CTM/real.ctm.interpreter.R')
source('~/Documents/GitHub/Bumble-Bees/CTM/real.ctm.interpreter.R')
source('~/Documents/GitHub/Bumble-Bees/CTM/real.ctm.interpreter.R')
`## Real Data CTM Interpreter
library(matrixStats)
library(tidyverse)
setwd("~/Documents/GitHub/Bumble-Bees")
source("data_loader.R")
## EYEBALL CLASSIFICATION REGIME
surely.untrained <- c(1,4,6:8,17,20,30,31,46,49,51:54,56,65,66,68,71:73,77:81,87,88,
90,94,95,98,99,101,113:119,121:123,126:129,134,136,146,148)
maybe.untrained <- c(2,13,14,29,48,50,76,82,85,93,104,105,133)
bee_obs <- data.frame( "color" = reg.data[, 1], "nectar" = reg.data[, 2],
"eyeball" = rep(NA, N), "p_est" = rep(NA, N),
"p_eyeball" = rep(NA,N),
'z_hat' = rep(NA, N), 'time_frac_trained' = rep(NA, N))
for(n in 1:N){
if(n %in% core.bees){
bee_obs[n, ]$eyeball <- "T"
} else if(n %in% surely.untrained){
bee_obs[n, ]$eyeball <- "U"
}
bee_obs[n, ]$time_frac_trained <- sum(journey.data[[n]][
which(journey.data[[n]][,'states'] == 1), 'times'])/
sum(journey.data[[n]][which(journey.data[[n]][,'states'] != 2)])
}
## Rough ps for design matrix
eye_mat <- data.frame("color"=c(rep("B",3), rep("W",3)), "nectar"=rep(c("A","C","O"),2), "frac"=rep(NA,6))
temp <- list(rep(0,0),rep(0,0),rep(0,0),rep(0,0),rep(0,0),rep(0,0))
bees_est <- which(is.na(bee_obs$eyeball) == FALSE)
for(n in bees_est){
color <- bee_obs[n, ]$color; nectar <- bee_obs[n, ]$nectar
temp[[which(eye_mat$color == color & eye_mat$nectar == nectar)]] <- c(
temp[[which(eye_mat$color == color & eye_mat$nectar == nectar)]], bee_obs[n,]$eyeball)
}
for(i in 1:6){
eye_mat[i, ]$frac <- length(which(temp[[i]]=="T"))/length(temp[[i]])
}
### Interpreter Begins
setwd("~/Internal/CTM_hooray")
run <- list()
for(a in 1:10){
name <- sprintf("ctm_results.%d.csv", a)
run[[a]] <- as.matrix(read.table(file=name, sep=',', header = FALSE))
run[[a]] <- run[[a]][,-1]
colnames(run[[a]]) <- NULL
}
N <- 154
T <- dim(run[[1]])[1]
Zs <- matrix(NA, nrow=10, ncol=N); Zs_prop <- matrix(NA, nrow=10, ncol=N)
zs_tot <- rep(0,0)
Betas <- matrix(NA, nrow=10, ncol=4)
beta_sds <- matrix(NA, nrow=10, ncol=4)
betas_tot <- rep(0,0)
Lambdas <- matrix(NA, nrow=10, ncol=8)
lambda_sds <- matrix(NA, nrow=10, ncol=8)
lambdas_tot <- rep(0,0)
for(a in 1:10){
Zs[a, ] <- round(colMeans(run[[a]][, 1:N]), 0)
Zs_prop[a, ] <- colSums(run[[a]][,1:N])/nrow(run[[a]][,1:N])
zs_tot <- rbind(zs_tot, as.matrix(run[[a]][, 1:N]))
Betas[a, ] <- colMedians(as.matrix((run[[a]][ (T/2):T, (N+8+2+1):(N+8+2+4)])))
beta_sds[a, ] <- colSds(as.matrix((run[[a]][ (T/2):T, (N+8+2+1):(N+8+2+4)])))
betas_tot <- rbind(betas_tot, as.matrix((run[[a]][ (T/2):T, (N+8+2+1):(N+8+2+4)])))
Lambdas[a, ] <- colMedians(as.matrix((run[[a]][, (N+1):(N+8)])))
lambda_sds[a, ] <- colSds(as.matrix((run[[a]][, (N+1):(N+8)])))
lambdas_tot <- rbind(lambdas_tot, as.matrix((run[[a]][, (N+1):(N+8)])))
}
ss = 1e5
B = 1e2
qs <- rep(0,0)
for(n in 1:N){
sds <- rep(NA, B)
for(b in 1:B){
sds[b] <- sd(sample(zs_tot[,n], size=ss, replace=TRUE))/ss
}
qs <- rbind(qs, as.vector(quantile(sds, c(0.025,0.975))))
}
Zs_data <- data.frame( "z_overall" = rep(NA, N), "z_frac" = (colSums(Zs_prop)/nrow(Zs_prop)) ,
"core" = rep(NA, N), "eyeball" = bee_obs$eyeball, "index" = seq(1,N),
"CI_min" = qs[,1], "CI_max" = qs[,2])
Betas_hat <- colMedians(Betas)
Lambdas_hat <- colMedians(Lambdas)
ps_hat <- transform.to.logit(regress.data(reg.data), Betas_hat)
for(n in 1:N){
Zs_data[n, 1] <- length(which(Zs[, n] == 1))/length(Zs[, n])
if(n %in% core.bees){
Zs_data[n, 3] <- "core"
} else{
Zs_data[n, 3] <- "unclear"
}
bee_obs[n, ]$p_est <- ps_hat[n]
bee_obs[n, ]$z_hat <- Zs_data$z_frac[n]
}
for(i in 1:6){
inds <- which(bee_obs$color == eye_mat[i, ]$color & bee_obs$nectar == eye_mat[i, ]$nectar)
bee_obs[inds, ]$p_eyeball <- eye_mat[i, ]$frac
}
core.bees.U <- which(which(Zs_data$z_overall==0) %in% surely.untrained)
zs.colors <- c("T" = "green4", "U" = "coral3")
Zs_ROC <- ggplot(data = Zs_data)+
geom_point(mapping=aes(y=z_frac, x = index, color=eyeball))+ # note, could also use y=z_overall
geom_errorbar(aes(x = index, ymin = z_frac - CI_min, ymax = z_frac + CI_max))+
scale_color_manual("By-eye estimate", labels = c("Trained", "Untrained", "Ambiguous"), values=zs.colors, na.value = "grey52")+
xlab("Bees")+
ylab(expression(hat(Z)))+
theme(legend.title=element_text(size=17, face="bold"), legend.text=element_text(size=17),
axis.text.x = element_text(size = 15), axis.text.y = element_text(size=15),
axis.title = element_text(size=17))
betas.colors <- c(B = "royalblue3", W='cornsilk2')
Betas_clean <- ggplot(data = bee_obs, mapping = aes(y = z_hat, x = nectar, fill=color) )+
geom_point(pch = 21, cex = 2, position=position_jitterdodge(dodge.width = 0.9))+
geom_point(aes(y=p_est), color = 'limegreen', show.legend = FALSE, pch=13, position=position_dodge(.9))+
geom_point(aes(y=p_eyeball), color = 'red2',show.legend = FALSE, pch=16, position=position_dodge(.9))+
stat_summary(fun=mean, geom="point", aes(group=color), show.legend = FALSE, position=position_dodge(.9),
color="black", size=2, pch=4)+
scale_fill_manual("Training \n Color:",values=betas.colors)+
scale_shape(guide=FALSE)+
xlab("Training Nectar")+
scale_x_discrete(labels= c("EtOH", "Caff", "Control"))+
ylab(expression(hat(Z)))+
theme(legend.title=element_text(size=17, face="bold"), legend.text=element_text(size=17),
axis.text.x = element_text(size = 15), axis.text.y = element_text(size=15),
axis.title = element_text(size=17))
Betas_bplot <- ggplot(data = bee_obs, mapping = aes(y = time_frac_trained, x = nectar, fill=color) )+
geom_boxplot()+
geom_point(aes(y=p_est), color = 'limegreen',show.legend = FALSE, pch=13, position=position_dodge(.75), alpha=.1)+
geom_point(aes(y=p_eyeball), color = 'red2',show.legend = FALSE, pch=16, position=position_dodge(.75))+
stat_summary(fun=mean, geom="point", aes(group=color),show.legend = FALSE, position=position_dodge(.75),
color="black", size=2, pch=4)+
scale_fill_manual(values=betas.colors)
Betas_violin <- ggplot(data = bee_obs, mapping = aes(y = time_frac_trained, x = nectar, fill=color) )+
geom_violin()+
geom_point(aes(y=p_est), color = 'limegreen',show.legend = FALSE, pch=13, position=position_dodge(.9), alpha=.1)+
geom_point(aes(y=p_eyeball), color = 'red2',show.legend = FALSE, pch=16, position=position_dodge(.9))+
stat_summary(fun=mean, geom="point", aes(group=color),show.legend = FALSE, position=position_dodge(.9),
color="black", size=2, pch=4)+
scale_fill_manual(values=betas.colors)+
theme(legend.title=element_text(size=17, face="bold"), legend.text=element_text(size=17),
axis.text.x = element_text(size = 15), axis.text.y = element_text(size=15),
axis.title = element_text(size=17))
# ### Chain Convergence Metrics
# library('MCMCpack', 'coda')
# ESS <- rep(0, 4)
# for(a in good.runs){
#   ESS <- ESS + as.vector(effectiveSize(run[[a]][, (N+10+1):(N+10+4)])) # roughly 8k samples per beta component
# }
#
# par(mfrow=c(2,5), mar=c(3, 3, 1.5, 1.5), mgp=c(2, 0.5, 0))
# autocorr.plot(as.mcmc(run[[5]][, (N+10+1)]))
#
#
### Lambda Posterior Predictive P-vals
classify.dwelltimes <- function(Js, time_mode){ # IN: list of journeys; OUT: list of dwell times
if(time_mode == "discrete"){
S <- length(Js)
out <- list()
for(s in 1:S){
dts <- list("Trained" = rep(0,0), "Flying" = rep(0,0), "Antitrained" = rep(0,0))
prev <- 2
counter <- 1
for(k in 2:length(Js[[s]])){
curr <- Js[[s]][k]
if(prev == curr){
counter = counter + 1
prev <- curr
} else{
dts[[prev]] <- c(dts[[prev]], counter)
counter <- 1
prev <- curr
}
}
out[[s]] <- dts
}
return(out)
} else if(time_mode == "continuous"){
S <- length(Js)
out <- list()
for(s in 1:S){
dts <- list("Trained" = rep(0,0), "Flying" = rep(0,0), "Antitrained" = rep(0,0))
for(i in 1:3){
dts[[i]]<- Js[[s]][which(Js[[s]][, "states"] == i),1]
}
out[[s]] <- dts
}
return(out)
} else{
return("ERROR IN classify.dwelltimes: must specify time_mode as discrete or continuous")
}
}
make.dtimes.df <- function(Js, time_mode, training){ # IN: list of dwell-times; time_mode; training for all
state <- c("Trained", "Flying", "Antitrained");
dts <- classify.dwelltimes(Js, time_mode)
df <- data.frame("DTimes" = rep(0,0), "State" = rep(0,0), "Training" = rep(0,0))
for(i in 1:3){
temp <- unlist(lapply(dts, `[[`, state[i]))
if(length(temp) == 0){
df <- rbind(df, data.frame("DTimes" = NA, "State" = state[i], "Training" = training))
} else{
df <- rbind(df, data.frame("DTimes" = temp, "State" = state[i], "Training" = training))
}
}
return(df)
}
ls_data <- rep(0,0)
S <- 1e3
train <- c("Untrained", "Trained")
sample.lambdas.tot <- function(size = 1){ # samples a lambda.hat
r <- nrow(lambdas_tot)
inds <- sample( seq(1,r, by=1), size = size, replace=FALSE)
return(lambdas_tot[inds,])
}
for(s in 1:S){
for(t in 1:2){ # trained, untrained
Js <- sim.ctmc.journey.data(1, 300, rep((t-1), 1), sample.lambdas.tot(1))[[1]]
ls_data <- rbind(ls_data, make.dtimes.df(Js, time_mode = "continuous", train[t]))
}
}
colony.names <- c("A","B","C","D","E","F","G","H","I","J")
emp_dt_df <- rep(0,0)
for(c in 1:length(colony.names)){
emp_dt_df <- rbind(emp_dt_df,
cbind(make.dtimes.df(journey.data[
which(Zs_data[col.ind[c, 2]:col.ind[c, 3],]$z_overall == 1)],
"continuous", train[2]), "Colony" = colony.names[c]),
cbind(make.dtimes.df(journey.data[
which(Zs_data[col.ind[c, 2]:col.ind[c, 3],]$z_overall == 0)],
"continuous", train[1]), "Colony" = colony.names[c])
)
}
ls.colors <- c("Trained" = "seagreen2", "Untrained"="orangered2")
ls_violin <- ggplot(data = ls_data, mapping = aes(y = log(DTimes), x = State, fill=Training) )+
geom_violin()+
geom_point(data=emp_dt_df, mapping = aes(y = log(DTimes)),
color = 'black', pch=16, alpha=0.17,
position=position_jitterdodge(jitter.height = 0, dodge.width = 0.9) )+
scale_fill_manual("Z Class", values=ls.colors)+
guides(fill = guide_legend(override.aes = list(shape = NA)))+
theme(legend.title=element_text(size=17, face="bold"), legend.text=element_text(size=17),
axis.text.x = element_text(size = 15), axis.text.y = element_text(size=15),
axis.title = element_text(size=17))+
ylab("log(dwell-times)")+
scale_x_discrete(labels= c("Trained", "Flying", "Novel"))
# facet_wrap(~ Colony, nrow = 2)
ls_bplot <- ggplot(data = ls_data, mapping = aes(y = log(DTimes), x = State, fill=Training) )+
geom_boxplot()+
geom_point(data=emp_dt_df, mapping = aes(y = log(DTimes)),
color = 'black', pch=16, alpha=0.17,
position=position_jitterdodge(jitter.height = 0, dodge.width = 0.9) )+
scale_fill_manual(values=ls.colors)+
facet_wrap(~ Colony, nrow = 2)
state <- c("Trained", "Flying", "Antitrained")
ppp.df <- data.frame("ppp" = rep(0,0),"Colony" = rep(0,0), "Training" = rep(0, 0), "State" = rep(0, 0))
for(c in 1:10){ # colony
for(s in 1:3){ # state
for(t in 1:2){ # training
dist <- ecdf(ls_data[which(ls_data$Training == train[t]&ls_data$State == state[s]),]$DTimes)
data <- emp_dt_df[which(emp_dt_df$Training == train[t]&emp_dt_df$State == state[s] &
emp_dt_df$Colony == colony.names[c]),]$DTimes
pval <- rep(NA, length(data))
for(l in 1:length(data)){
pval[l] <- 2*min(dist(data)[l], (1-dist(data)[l]))
}
ppp.df <- rbind(ppp.df, data.frame(
"ppp" = pval,"Colony" = colony.names[c],"Training" = train[t],"State" = state[s]))
}
}
}
ppp_bplot <- ggplot(data = ppp.df, mapping=aes(y = log10(ppp), x = State, fill=Training))+
geom_boxplot()+
stat_summary(fun=mean, geom="point", aes(group=Training), position=position_dodge(.75),
color="black", size=2, pch=4, show.legend=FALSE)+
scale_fill_manual(values=ls.colors)+
ylab("log10(ppp)")+
theme(legend.title=element_text(size=17, face="bold"), legend.text=element_text(size=17),
axis.text.x = element_text(size = 15), axis.text.y = element_text(size=15),
axis.title = element_text(size=17))+
scale_x_discrete(labels= c("Trained", "Flying", "Novel"))
### STEP 0: Define your directories
primary_directory <- "~/Documents/GitHub/Crickets-Methods"
output_directory <- "graphical_pdf_files"
input_directory <- "DLC_csv_files"
## I recommend using the structure from the extant GitHub link, but you can use whatever file structure you deem fit.
## (These three lines above are all you should have to change if changing the file structure.)
setwd(primary_directory)
### STEP 1: Decide on your filename(s)
file_name <- "190626-L1DeepCut_resnet50_190708Jul8shuffle1_200000filtered" # remember quotes!!
file_name_csv <- paste(file_name, ".csv", sep='') # adds suffix for you
output_name <- NULL ## If you want to change the output name, you can do so here.
## Otherwise, leaving it as NULL will result in file_name with "_graphs.pdf" tacked on.
## If you choose to change the file name, remember to use quotes and omit the .pdf (suffix added in 5_Grapher.R)
## (As a general rule here, you should never have to add suffixes when you type names. The scripts take care of that for you)
cat("Step 1 Complete. Input name:", file_name_csv, "\n") ## reads out status for your convenience
### STEP 2: Load in the functions
source("2_Functions.R") # this will read in the script containing the necessary functions
cat("Step 2 Complete. Functions successfully read.", "\n")
### STEP 3: Load in the data
source("3_Reader.R")
cat("Step 3 Complete. Data successfully read.", "\n")
### STEP 4: Perform the relevant calculations
minimum_sound <- 0 # in dB, typically zero
maximum_sound <- 90 # in dB, depends on experiment
tick_mark_interval <- 10 # in dB, space between tick marks
source("4_Calculator.R")
cat("Step 4 Complete. Calculations performed.", "\n")
## POSITION GRAPH
plot(viz_a_x[14,],viz_a_y[14,], xlab = '', ylab='', ylim=c(-700,-100), col = "black",pch = 16,axes=FALSE, xaxt = 'n')
points(viz_w_x[14,],viz_w_y[14,], xlim = c(0, frame_len), ylim=c(-800,-100), col = "blue",pch = 16,cex=3)
points(viz_ul_x[14,],viz_ul_y[14,],col = "lime green",pch = 16,cex=3)
points(viz_ll_x[14,],viz_ll_y[14,],col = "gold2",pch = 16,cex=3)
points(viz_ur_x[14,],viz_ur_y[14,],col = "darkorange2",pch = 16,cex=3)
points(viz_lr_x[14,],viz_lr_y[14,],col = "red3",pch = 16,cex=3)
box()
position_lab_coords <- position.label( viz_a_x[14,], c(-700,-100), c(-0.02, 0.1) )
text(x=position_lab_coords[1], y=position_lab_coords[2], label="(A)",cex=5)
mtext(side=2,"Mean Position", line=4,cex=2.5)
for(j in 1:len)
{
segments(viz_a_x[14,j], viz_a_y[14,j], viz_w_x[14,j],  viz_w_y[14,j], col = "grey", lwd = 4)
segments(viz_a_x[14,j], viz_a_y[14,j], viz_ul_x[14,j], viz_ul_y[14,j], col = "grey", lwd = 4)
segments(viz_a_x[14,j], viz_a_y[14,j], viz_ur_x[14,j], viz_ur_y[14,j], col = "grey", lwd = 4)
segments(viz_ul_x[14,j], viz_ul_y[14,j], viz_ll_x[14,j], viz_ll_y[14,j], col = "grey", lwd = 4)
segments(viz_ur_x[14,j], viz_ur_y[14,j], viz_lr_x[14,j], viz_lr_y[14,j], col = "grey", lwd = 4)
}
## 5_Grapher.R. Used with 1_Master.
setwd(output_directory) # enter subdirectory in which to store graphs
if(is.null(output_name)){ # generates the output name file according to preference specified in 1_Master.R
output_name_pdf <- paste(file_name, "_graphs.pdf", sep='')
} else{
output_name_pdf <- paste(output_name, ".pdf", sep='')
}
pdf(output_name_pdf, width=30,height=20)
par(mfrow = c(4,1), mar = c(0.5,7,0.5,0.5), oma = c(10,2,4,24),cex.lab=1.5,cex.axis=1.5)
## POSITION GRAPH
plot(viz_a_x[14,],viz_a_y[14,], xlab = '', ylab='', ylim=c(-700,-100), col = "black",pch = 16,axes=FALSE, xaxt = 'n')
points(viz_w_x[14,],viz_w_y[14,], xlim = c(0, frame_len), ylim=c(-800,-100), col = "blue",pch = 16,cex=3)
points(viz_ul_x[14,],viz_ul_y[14,],col = "lime green",pch = 16,cex=3)
points(viz_ll_x[14,],viz_ll_y[14,],col = "gold2",pch = 16,cex=3)
points(viz_ur_x[14,],viz_ur_y[14,],col = "darkorange2",pch = 16,cex=3)
points(viz_lr_x[14,],viz_lr_y[14,],col = "red3",pch = 16,cex=3)
box()
position_lab_coords <- position.label( viz_a_x[14,], c(-700,-100), c(-0.02, 0.1) )
text(x=position_lab_coords[1], y=position_lab_coords[2], label="(A)",cex=5)
mtext(side=2,"Mean Position", line=4,cex=2.5)
for(j in 1:len)
{
segments(viz_a_x[14,j], viz_a_y[14,j], viz_w_x[14,j],  viz_w_y[14,j], col = "grey", lwd = 4)
segments(viz_a_x[14,j], viz_a_y[14,j], viz_ul_x[14,j], viz_ul_y[14,j], col = "grey", lwd = 4)
segments(viz_a_x[14,j], viz_a_y[14,j], viz_ur_x[14,j], viz_ur_y[14,j], col = "grey", lwd = 4)
segments(viz_ul_x[14,j], viz_ul_y[14,j], viz_ll_x[14,j], viz_ll_y[14,j], col = "grey", lwd = 4)
segments(viz_ur_x[14,j], viz_ur_y[14,j], viz_lr_x[14,j], viz_lr_y[14,j], col = "grey", lwd = 4)
}
## TWITCH GRAPH
plot(shots,lowerrightshot.twitch, type = "l", xlab = "", ylab = "", lwd = 4, col = rgb(205/255, 0, 0, 0.6),axes=FALSE)
points(shots,bodyshot.twitch, type = "l", col = rgb(0, 0, 1, 0.6), lwd = 4)
points(shots,lowerleftshot.twitch, type = "l", xlab = "", ylab = "Lower Left Twitch", col = rgb(238/255, 201/255, 0, 0.6), lwd = 4)
points(shots,upperrightshot.twitch, type = "l", xlab = "", ylab = "Upper Right Twitch", col = rgb(238/255, 118/255, 0, 0.6), lwd = 4)
points(shots,upperleftshot.twitch , type = "l", xlab = "", ylab = "Upper Left Twitch", col = rgb(50/255, 205/255, 50/255, 0.6), lwd = 4)
twitch_lab_coords <- position.label(shots, lowerrightshot.twitch, c(-0.02, 0.1) )
text(x=twitch_lab_coords[1],y=twitch_lab_coords[2],label="(B)",cex=5)
box()
mtext(side=2,expression(paste("Variation (",mm^2,")",sep="")), line=4,cex=2.5)
axis(2,at=c(10000,30000, 60000),labels=c(100,300,600),cex.axis=2.5)
## ANGLE GRAPH
plot(shots, angle.frame, type = "l", xlab = "",ylab = "", col = "mediumorchid4", lwd = 4,axes=FALSE)
mtext(side=2,expression(paste("Angle (degrees)",sep="")), line=4,cex=2.5)
angle_lab_coords <- position.label( shots, angle.frame, c(-0.02, 0.1) )
text(x=angle_lab_coords[1],y=angle_lab_coords[2],label="(C)",cex=5)
box()
angle_range <- round(range(angle.frame, na.rm=TRUE), 0)
axis(2, at=seq(angle_range[1],angle_range[2], by=2), cex.axis=2.5)
## SOUND GRAPH
## Determines sidedness of sound stimulus
cols <- rep("lightgrey", length(ss_x_db))
light.green <- rgb(0.1,0.9,0.1,0.5)
light.red <- rgb(0.9,0.1,0.1,0.5)
sidedness_cutoff <- mean(range(ss_y))
for(i in 1:frame_len){
if( ss_x_db[i] > 3){ # if nonzero sound, assign side
if(ss_y[i] < sidedness_cutoff){ # right on bottom
cols[i] <- light.green
} else { # left on top
cols[i] <- light.red
}
}
}
if(file_name_csv == "191009_190708_ALT.test.file_csv"){ ## this was used back when the decibel measurements weren't working properly: ignore it, don't delete it.
## BANDAID FIX FOR THE DECIBEL ISSUE
# 5,5 | 4,5 | 5,5 | 5,5 | 5,5 | 5,5 | 5,5 | 5,5 | 5,4
ud <- c(5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4)
out <- rep(0,0)
for(r in 1:length(ud))
{
if (r%%2 ==1)
{
out <- c(out,rep(1,ud[r]))
}else
{
out <- c(out,rep(2,ud[r]))
}
}
counter <- 0
for(j in 2:(length(ss_x)-1))
{
if ((ss_x[j]>0)&(ss_x[j-1]==0))
{
counter <- counter +1
}
if (ss_x[j]>0)
{
if(out[counter]==1)
{
cols[j] <- light.red
}else
{
cols[j] <- light.green
}
}
}
par(mar=c(5,7,0.5,0.5))
plot(1:frame_len,ss_x,  type = "h", xlab = "", ylab = "",pch=20, col = cols,axes=FALSE,ylim=c(0,100),cex=3,yaxs='i')
axis(1,labels=TRUE,cex.axis=3,line=1,tick=FALSE)
mtext(side=2,"Sound (dB)",line=4,cex=3)
mtext(side=1,"Frame",line=4,cex=3)
axis(2,labels=c(30,60,90),at=c(30,60,90),cex.axis=2.5)
legend(x="topleft",legend=c("L","R"),title="Side",col=c(light.red,light.green),cex=5,pch=20)
text(x=(-85),y=(10),label="(D)",cex=5)
box()
} else{
par(mar=c(5,7,0.5,0.5))
# plot(1:frame_len, ss_x_db, type='l', lwd=4, col = "seagreen",
#      xlab = "", ylab = "", axes=FALSE, ylim=c(minimum_sound,maximum_sound*1.1), cex=3, yaxs='i')
plot(1:frame_len, ss_x_db, type='h', lwd=1, pch=20, col =cols,
xlab = "", ylab = "", axes=FALSE, ylim=c(minimum_sound,maximum_sound*1.1), cex=3, yaxs='i')
axis(1,labels=TRUE,cex.axis=3,line=1,tick=FALSE)
mtext(side=2,"Sound (dB)",line=4,cex=3)
mtext(side=1,"Frame",line=8,cex=3)
axis(2,cex.axis=2.5,
labels=seq(minimum_sound, maximum_sound,by=tick_mark_interval),
at   = seq(minimum_sound, maximum_sound, by=tick_mark_interval))
legend(x="topleft", legend=c("L","R"),title="Side",col=c(light.red,light.green),cex=5,pch=20)
db_lab_coords <- position.label((1:frame_len), ss_x_db, c(-0.02, 0.1) )
text(x=db_lab_coords[1], y=db_lab_coords[2],label="(D)",cex=5)
box()
}
dev.off()
setwd(primary_directory) # return to main directory
source('~/Documents/GitHub/Crickets-Methods/1_Master.R')
source('~/Documents/GitHub/Crickets-Methods/1_Master.R')
shots
